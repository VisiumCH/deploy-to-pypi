
name: Deploy to PyPI

on:
  workflow_call:
    inputs:
      major_update:
        description: 'Set it to true to bump a major version'
        required: false
        type : boolean
        default: false

jobs:
  publish-to-pypi:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the repository with full history depth to retrieve all tags
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          python -m pip install --upgrade twine
          python -m pip install --upgrade setuptools_scm
          python -m pip install --upgrade build
          python -m pip install --upgrade semver

      - name: Check if git tag exists
        run: |
          # get the current git tag
          CURRENT_TAG=$(git describe --tags --abbrev=0 2>/dev/null)
          # If no git tag exists, create one with version 0.0.0
          if [ -z "$CURRENT_TAG" ]; then
            # If the tag is empty, create a new tag with the version 0.0.0
            NEW_TAG = 0.0.0
            # annotated tags have creation date
            git tag -a $NEW_TAG
            # push the tag to the remote repository
            git push origin $NEW_TAG
          fi

      - name: Increment the git tag
        run: |
          # get the current git tag
          CURRENT_TAG=$(git describe --tags --abbrev=0)
          if [ "${{inputs.major_update}}" == "true" ]; then
            # Increment the tag by a major version with the semver python package
            NEW_TAG=$(python -c "import semver; print(semver.bump_major('$CURRENT_TAG'))")
          else
            # Increment the tag by a minor version with the semver python package
            NEW_TAG=$(python -c "import semver; print(semver.bump_minor('$CURRENT_TAG'))")
          fi
          git tag -a $NEW_TAG
          # push the tag to the remote repository
          git push origin $NEW_TAG

      # - name: Retrieve the package version using setuptools_scm and publish to PyPI
      #   run: |
      #     # Use setuptools_scm to get the current version and echo it
      #     PACKAGE_VERSION=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")
      #     echo "Package version: $PACKAGE_VERSION"

      #     # Build the package using setuptools_scm for versioning
      #     python -m build

      #     # Publish the package to PyPI using twine
      #     python -m twine upload dist/*
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}